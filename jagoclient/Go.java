package jagoclient;

/*
This file contains the Go applet and its main method.
*/

import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;

import jagoclient.dialogs.*;
import jagoclient.gui.*;
import jagoclient.igs.*;
import jagoclient.partner.*;
import jagoclient.sound.*;
import jagoclient.board.*;
import jagoclient.Global;
import jagoclient.Dump;
import jagoclient.partner.partner.*;
import jagoclient.igs.connection.*;
import jagoclient.partner.*;

import rene.util.list.*;

/**
To get the password, when there is none (but a user name) and a server
connection is requested. Some users do not like their password to
be permanently written to the server.cfg file.
*/

class GetPassword extends GetParameter
{	Connection C;
	Go G;
	public String Password;
	public GetPassword (Frame f, Go g, Connection c)
	{	super(f,Global.resourceString("Enter_Password_"),
			Global.resourceString("Password"),g,'*',true);
		C=c; G=g;
		show();
	}
	public boolean tell (Object o, String s)
	{	Password=s;
		return true;
	}
}

/**
The Go applet is an applet, which resides in a frame opened
from the main() method of Go (or generated by the WWW applet
that starts Go). This frame is of class MainFrame.
<P>
It contains a card panel with two panels: the server connections and
the partner connections.
<P>
This applet handles all the buttons in the server and the
partner panels.
<P>
Several private dialogs are used to edit the connection parameters,
get the password (if there is none in server.cfg, but automatic login is
requested), ask for closing the Jago application altogether and
read in other parameters.
@see MainFrame
*/

public class Go extends Applet
	implements DoActionListener, ActionListener
{	int Test=0;
	java.awt.List L,PL;
	ListClass ConnectionList,PartnerList;
	Button CConnect,CEdit,CAdd,CDelete,
		PConnect,PEdit,PAdd,PDelete,POpen;
	static Go go;
	String Server="",MoveStyle="",Encoding="";
	int Port;
	public OpenPartnerFrame OPF=null;
	
	/** Constructor for use with a specific server and port */
	public Go (String server, int port, String movestyle, String encoding)
	{	Server=server; Port=port;  MoveStyle=movestyle; Encoding=encoding;
	}

	public Go ()
	{	Server=""; Port=0; MoveStyle=""; Encoding="";
	}

	public void actionPerformed (ActionEvent e)
	{	if (e.getSource()==L)
		{	doAction("ConnectServer");
		}
		if (e.getSource()==PL)
		{	doAction("ConnectPartner");
		}
		else doAction(e.getActionCommand());
	}

	/**
	This init routines has two flavours. One is for specific servers
	(as used when the applet is on a Web page of the go server) and
	one for general servers.
	<P>
	The general setup will create a server and a partner panel. Those
	will be put into a card panel using the CardPanel class. The class
	completely builds these two panels int this version.
	@see jagoclient.gui.CardPanel
	*/
	
    public void init ()
	{	setLayout(new BorderLayout());
		if (Server.equals("")) // general setup
		{	// create a card panel
			CardPanel cardp=new CardPanel();
			// Server connections panel
			Panel p1=new MyPanel();
			p1.setLayout(new BorderLayout());
			// add north label
			p1.add("North",
				new MyLabel(Global.resourceString("Server_Connections__")));
			// add button panel
			Panel p=new MyPanel();
			Global.setcomponent((Component)p);
			p.add(CConnect=new ButtonAction(this,
				Global.resourceString("Connect"),"ConnectServer"));
			p.add(new MyLabel(" "));
			p.add(CEdit=new ButtonAction(this,
				Global.resourceString("Edit"),"EditServer"));
			p.add(CAdd=new ButtonAction(this,
				Global.resourceString("Add"),"AddServer"));
			p.add(CDelete=new ButtonAction(this,
				Global.resourceString("Delete"),"DeleteServer"));
			p1.add("South",p);
			// add center list with servers
			L=new java.awt.List();
			L.addActionListener(this);
			L.setFont(Global.Monospaced);
			L.setBackground(Global.gray);
			Connection c;
			String l;
			ConnectionList=new ListClass();
			try // read servers from server.cfg
			{	BufferedReader in=Global.getStream("server.cfg");
				while (true)
				{	l=in.readLine();
					if (l==null || l.equals("")) break;
					c=new Connection(l);
					if (c.valid())
					{	L.add(c.Name);
						ConnectionList.append(new ListElement(c));
					}
					else break;
				}
				in.close();
			}
			catch (Exception ex) {}
			if (L.getItemCount()>0) L.select(0);
			p1.add("Center",L);
			// add the partner panel to the card panel
			cardp.add(p1,Global.resourceString("Server_Connections"));
			// partner connections panel
			Panel p2=new MyPanel();
			p2.setLayout(new BorderLayout());
			// north label
			p2.add("North",
				new MyLabel(Global.resourceString("Partner_Connections__")));
			// list class for partner connections
			PL=new java.awt.List();
			PL.addActionListener(this);
			PL.setFont(Global.Monospaced);
			PL.setBackground(Global.gray);
			Partner cp;
			PartnerList=new ListClass();
			try // read connections from partner.cfg
			{	BufferedReader in=Global.getStream("partner.cfg");
				while (true)
				{	l=in.readLine();
					if (l==null || l.equals("")) break;
					cp=new Partner(l);
					if (cp.valid())
					{	PL.add(cp.Name);
						PartnerList.append(new ListElement(cp));
					}
					else break;
				}
				in.close();
			}
			catch (Exception ex) {}
			if (PL.getItemCount()>0) PL.select(0);
			Global.PartnerList=PartnerList;
			p2.add("Center",PL);
			// button panel
			Panel pp=new MyPanel();
			pp.add(PConnect=new ButtonAction(this,
				Global.resourceString("Connect"),"ConnectPartner"));
			pp.add(new MyLabel(" "));
			pp.add(PEdit=new ButtonAction(this,
				Global.resourceString("Edit"),"EditPartner"));
			pp.add(PAdd=new ButtonAction(this,
				Global.resourceString("Add"),"AddPartner"));
			pp.add(PDelete=new ButtonAction(this,
				Global.resourceString("Delete"),"DeletePartner"));
			pp.add(new MyLabel(" "));
			pp.add(POpen=new ButtonAction(this,
				Global.resourceString("Open_")));
			p2.add("South",pp);
			cardp.add(p2,Global.resourceString("Partner_Connections"));
			// add the card panel to the applet
			add("Center",cardp);
		}
		else // specific server setup
		{	// similar to the above, but simpler and using a single panel only
			Panel p1=new MyPanel();
			p1.setLayout(new BorderLayout());
			p1.add("North",
				new MyLabel(Global.resourceString("Server_Connection__")));
			Panel p=new MyPanel();
			Global.setcomponent((Component)p);
			p.add(CConnect=new ButtonAction(this,
				Global.resourceString("Connect"),"ConnectServer"));
			p1.add("South",p);
			L=new java.awt.List();
			L.setFont(Global.Monospaced);
			L.setBackground(Global.gray);
			L.addActionListener(this);
			Connection c;
			String l;
			ConnectionList=new ListClass();
			ConnectionList.append(new ListElement(
				new Connection("["+Server+"] ["+Server+"] ["+Port+"] ["+"] ["+"] ["+MoveStyle+"] ["+Encoding+"]")));
			L.add(Server);
			if (L.getItemCount()>0) L.select(0);
			p1.add("Center",L);
			add("Center",p1);
		}
	}
	
  	public void doAction (String o)
  	{	if ("ConnectServer".equals(o))
  		{	String s=L.getSelectedItem();
  			if (s==null) return;
  			Connection c=find(L.getSelectedItem());
  			if (c!=null) // try to connect, if not already tried
  			{	if (c.Trying)
  				{	new Message(Global.frame(),
  						Global.resourceString("Already_trying_this_connection"));
  					return;
  				}
  				if (c.Password.equals("") && !c.User.equals("")
  					&& Global.getParameter("automatic",true)) 
  				// get password, if there is a user name, but no password,
  				// and automatic login
  				{	GetPassword GP=new GetPassword(F,this,c);
  					if (GP.Password.equals("")) return;
  					// create a connection frame and connect via
	  				// the connect class
  					ConnectionFrame cf=
  						new ConnectionFrame(
  							Global.resourceString("Connection_to_")+c.Name+
  							Global.resourceString("_as_")+
	  					c.User,c.Encoding);
  					Global.setwindow(cf,"connection",500,400);
	  				new Connect(c,GP.Password,cf);
  				}
  				else
  				{	// create a connection frame and connect via
	  				// the connect class
  					ConnectionFrame cf=
  						new ConnectionFrame(
  							Global.resourceString("Connection_to_")+c.Name+
  							Global.resourceString("_as_")+
	  					c.User,c.Encoding);
  					Global.setwindow(cf,"connection",500,400);
	  				new Connect(c,cf);
	  			}
  				return;
  			}
  		}
  		else if ("ConnectPartner".equals(o))
  		{	String s=PL.getSelectedItem();
  			if (s==null) return;
  			Partner c=pfind(PL.getSelectedItem());
  			if (c!=null) // try connecting to this partner server, if not trying already
  			{	if (c.Trying)
  				{	new Message(Global.frame(),Global.resourceString("Already_trying_this_connection"));
  					return;
  				}
  				// create a PartnerFrame and connect via ConnectPartner class
  				PartnerFrame cf=
  					new PartnerFrame(
  						Global.resourceString("Connection_to_")+c.Name,false);
				Global.setwindow(cf,"partner",500,400);
  				new ConnectPartner(c,cf);
  			}
  		}
  		else if ("EditServer".equals(o))
  		{	String s=L.getSelectedItem();
  			if (s==null) return;
  			Connection c=find(L.getSelectedItem());
  			if (c!=null)
  			{	new EditConnection(F,ConnectionList,c,this);
  			}
  		}
  		else if ("EditPartner".equals(o))
  		{	String s=PL.getSelectedItem();
  			if (s==null) return;
  			Partner c=pfind(PL.getSelectedItem());
  			if (c!=null)
  			{	new EditPartner(F,PartnerList,c,this);
  			}
  		}
  		else if ("AddServer".equals(o))
  		{	new EditConnection(F,ConnectionList,this);
  		}
  		else if ("AddPartner".equals(o))
  		{	new EditPartner(F,PartnerList,this);
  		}
  		else if ("DeleteServer".equals(o) && L.getSelectedItem()!=null)
  		{	ListElement lc=ConnectionList.first();
  			Connection co;
  			while (lc!=null)
  			{	co=(Connection)lc.content();
  				if (co.Name.equals(L.getSelectedItem()))
  				{	ConnectionList.remove(lc);
  				}
  				lc=lc.next();
  			}
  			updatelist();
  		}
  		else if ("DeletePartner".equals(o) && PL.getSelectedItem()!=null)
  		{	ListElement lc=PartnerList.first();
  			Partner co;
  			while (lc!=null)
  			{	co=(Partner)lc.content();
  				if (co.Name.equals(PL.getSelectedItem()))
  				{	PartnerList.remove(lc);
  				}
  				lc=lc.next();
  			}
  			updateplist();
  		}
  		else if (Global.resourceString("Open_").equals(o))
  		{	if (OPF==null) OPF=new OpenPartnerFrame(this);
  			else OPF.refresh();
  		}
  	}
  	
  	public void itemAction (String o, boolean flag) {}

	/** search a specific connection by name */
	public Connection find (String s)
	{	ListElement lc=ConnectionList.first();
		Connection c;
		while (lc!=null)
		{	c=(Connection)lc.content();
			if (c.Name.equals(s)) return c;
			lc=lc.next();
		}
		return null;
	}
	
	/** find a specific partner server by name */
	public Partner pfind (String s)
	{	ListElement lc=PartnerList.first();
		Partner c;
		while (lc!=null)
		{	c=(Partner)lc.content();
			if (c.Name.equals(s)) return c;
			lc=lc.next();
		}
		return null;
	}
	
	/** The frame containing the Go applet */
	public static MainFrame F=null;
	
	/**
	This is the main method for the JagoClient application. It
	is normally envoced via "java Go".
	<P>
	It opens a frame of class MainFrame, initializes the parameter
	list and starts a dump on request in the command line. If
	a game name is entered in the command line, it will also
	open a GoFrame displaying the game.
	<P>
	An important point is that the application will write
	its setup to go.cfg.
	<P>
	Available arguments are
	<ul>
	<li> -h sets the home directory for the application
	<li> -d starts a session dump to dump.dat
	<li> -t dumps tp the termimal too
	<li> another argument opens a local SGF file immediately
	</ul>
	
	*/
	public static void main (String args[])
	{	// scan arguments
		int na=0;
		boolean homefound=false;
		String localgame="";
		while (args.length>na)
		{	if (args.length-na>=2 && args[na].startsWith("-l"))
			{	Locale.setDefault(new Locale(args[na+1],"")); na+=2;
			}
			else if (args.length-na>=2 && args[na].startsWith("-h"))
			{	Global.home(args[na+1]); na+=2;
				homefound=true;
			}
			else if (args[na].startsWith("-d"))
			{	Dump.open("dump.dat"); na++;
			}
			else if (args[na].startsWith("-t"))
			{	Dump.terminal(true); na++;
			}
			else
			{	localgame=args[na]; na++;
			}
		}
		// initialize some Global things
		Global.setApplet(false);
		if (!homefound)	Global.home(System.getProperty("user.home"));
		Global.readparameter("go.cfg"); // read setup
		Global.createfonts();
		CloseFrame CF;
		Global.frame(CF=new CloseFrame("Global")); // a default invisible frame
		CF.seticon("ijago.gif");
		// create a MainFrame
		F=new MainFrame(Global.resourceString("_Jago_"));
		// add a go applet to it and initialize it
		F.add("Center",go=new Go());
		go.init();
		go.start();
		F.show();
		Global.loadmessagefilter(); // load message filters, if available
		JagoSound.play("high","",true); // play a welcome sound
		if (!localgame.equals("")) openlocal(localgame);
			// open a SGF file, if there was a parameter
		else 
			if (Global.getParameter("beauty",false))
				// start a board painter with the last known
				// board dimensions
			{	Board.woodpaint=new WoodPaint(F);
			}
	}

	/** update the list of servers */
	public void updatelist ()
	{	if (Global.isApplet()) return;
		try
		{	PrintWriter out=new PrintWriter(
				new FileOutputStream(Global.home()+"server.cfg"));
			ListElement lc=ConnectionList.first();
			L.removeAll();
			while (lc!=null)
			{	Connection c=(Connection)lc.content();
				L.add(c.Name);
				c.write(out);
				lc=lc.next();
			}
			out.close();
		}
		catch (Exception e)
		{	if (F!=null) new Message(F,Global.resourceString("Could_not_write_to_server_cfg"));
		}
	}

	/** update the list of partners */
	public void updateplist ()
	{	if (Global.isApplet()) return;
		try
		{	PrintWriter out=new PrintWriter(
				new FileOutputStream(Global.home()+"partner.cfg"));
			ListElement lc=PartnerList.first();
			PL.removeAll();
			while (lc!=null)
			{	Partner c=(Partner)lc.content();
				PL.add(c.Name);
				c.write(out);
				lc=lc.next();
			}
			out.close();
		}
		catch (Exception e)
		{	if (F!=null) new Message(F,
				Global.resourceString("Could_not_write_to_partner_cfg"));
		}
	}

	/** open a local game window (called from main) */
	static void openlocal (String file)
	{	GoFrame gf=new GoFrame(new Frame(),"Local");
		gf.load(file);
	}
}
